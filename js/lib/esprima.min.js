// Esprima Fallback - Simplified version for basic parsing
// This is a minimal implementation for when CDN fails
(function() {
    'use strict';
    
    if (typeof window.esprima !== 'undefined') {
        return; // Esprima already loaded
    }
    
    // Simple AST node types
    const NodeType = {
        Program: 'Program',
        FunctionDeclaration: 'FunctionDeclaration',
        VariableDeclaration: 'VariableDeclaration',
        ExpressionStatement: 'ExpressionStatement',
        CallExpression: 'CallExpression',
        MemberExpression: 'MemberExpression',
        Identifier: 'Identifier',
        Literal: 'Literal'
    };
    
    // Simplified parser - basic implementation
    function parseScript(code, options) {
        options = options || {};
        
        // This is a very basic fallback parser
        // In a real implementation, you would need a full JavaScript parser
        console.warn('使用简化的Esprima备用解析器');
        
        try {
            // Try to use built-in Function constructor for basic validation
            new Function(code);
            
            // Return a minimal AST structure
            return {
                type: NodeType.Program,
                body: [{
                    type: NodeType.ExpressionStatement,
                    expression: {
                        type: NodeType.Literal,
                        value: 'Simplified AST - Full parsing requires Esprima CDN',
                        raw: '"Simplified AST - Full parsing requires Esprima CDN"'
                    }
                }],
                sourceType: 'script'
            };
        } catch (error) {
            throw new Error('JavaScript语法错误: ' + error.message);
        }
    }
    
    // Export esprima object
    window.esprima = {
        parseScript: parseScript,
        version: '4.0.1-fallback'
    };
    
    console.log('✅ Esprima fallback loaded');
})();